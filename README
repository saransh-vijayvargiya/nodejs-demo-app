1.Project Structure
bash
Copy
Edit
nodejs-demo-app/
├── .github/
│   └── workflows/
│       └── main.yml       # GitHub Actions CI/CD workflow
├── Dockerfile             # Docker configuration
├── package.json           # Node.js config
├── app.js                 # Node.js application
└── README.md              # Optional


2.app.js
js
Copy
Edit
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Hello from Node.js App deployed via GitHub Actions and Docker!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

3.package.json
json
Copy
Edit
{
  "name": "nodejs-demo-app",
  "version": "1.0.0",
  "description": "A simple Node.js app for CI/CD demo",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "echo \"No tests yet\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.4"
  }
}

4.Dockerfile
Dockerfile
Copy
Edit
FROM node:18

WORKDIR /usr/src/app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

5. .github/workflows/main.yml
This workflow automates: test → build → push (to DockerHub) on every push to main.

yaml
Copy
Edit
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test || echo "No tests found"

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:latest


6.GitHub Secrets Setup
Go to your GitHub repo:

Settings → Secrets and variables → Actions → New repository secret

Add the following:

Name	Value
DOCKERHUB_USERNAME	Your DockerHub username (saranshvijayvargiya)
DOCKERHUB_TOKEN	DockerHub access token (not password)

Generate token here: https://hub.docker.com/settings/security

7.Deployment Process
Push your app code to GitHub (main branch).

GitHub Actions workflow runs automatically:

Installs dependencies

Runs tests

Builds Docker image

Pushes Docker image to DockerHub


NOTE- For this assignment i have used my dockers own id and password in the pipeline as i was getting an error all the time when i was using the secret key. So next time on wards i will not use my personal credentials as it is not recommened as per the practice.

Thanks you
