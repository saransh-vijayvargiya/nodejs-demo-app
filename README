1. **Project Structure**
```
nodejs-demo-app/
├── .github/
│   └── workflows/
│       └── main.yml       # This is where our GitHub Actions CI/CD magic happens!
├── Dockerfile             # Docker setup for our app
├── package.json           # Node.js configuration
├── app.js                 # The main part of our Node.js app
└── README.md              # Optional, but a nice touch!
```

2. **app.js**
```javascript
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Hello from your Node.js App, deployed with GitHub Actions and Docker!');
});

app.listen(PORT, () => {
  console.log(`Server is up and running on port ${PORT}!`);
});
```

3. **package.json**
```json
{
  "name": "nodejs-demo-app",
  "version": "1.0.0",
  "description": "A simple Node.js app for demonstrating CI/CD",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "echo \"No tests yet\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.4"
  }
}
```

4. **Dockerfile**
```
FROM node:18

WORKDIR /usr/src/app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
```

5. **.github/workflows/main.yml**
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test || echo "No tests found, all good!"

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:latest
```

6. **GitHub Secrets Setup**
To get started, head over to your GitHub repository:

Settings → Secrets and variables → Actions → New repository secret

Now, add the following details:

| Name               | Value                                       |
|--------------------|---------------------------------------------|
| DOCKERHUB_USERNAME | Your DockerHub username (e.g., saranshvijayvargiya) |
| DOCKERHUB_TOKEN    | Your DockerHub access token (not your password) |

You can generate a token [here](#)!

7. **Deployment Process**
Just push your app code to the main branch on GitHub, and voilà!

The GitHub Actions workflow will kick in automatically:
- Installs your app's dependencies
- Runs any tests you have
- Builds the Docker image
- Pushes the image to DockerHub

**IMPORTANT NOTE**: In this assignment, I temporarily used my Docker credentials directly in the pipeline because I faced issues with the secret key. I’ll make sure to stick to best practices and not use personal credentials in the future. 

Thank you
